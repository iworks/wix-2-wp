<?php


class iworks_wxr {

	private $imported;
	public $mode = 'echo';
	private $config;
	private $thumbnails;

	public function __construct() {
		$this->imported['author'] = array();
	}

	public function head() {
		global $config;
		$this->config = $config;

		ob_start();
		?><?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
	on the site. For each author, you may choose to map to an
	existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
	contained in this file into your site.
-->
<!-- generator="iworks.pl" created="<?php echo date( 'c' ); ?>"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title><?php echo strip_tags( $config->site->title ); ?></title>
<link><?php echo strip_tags( $config->site->link ); ?></link>
<description><?php echo strip_tags( $config->site->description ); ?></description>
<pubDate>Fri, 19 Jul 2013 18:26:18 +0000</pubDate>
<language>pl</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://iworks.pl/</wp:base_site_url>
<wp:base_blog_url><?php echo strip_tags( $config->site->link ); ?></wp:base_blog_url>
		<?php
		$content = ob_get_contents();
		ob_end_clean();
		if ( 'test' == $this->mode ) {
			return;
		}
		if ( 'return' == $this->mode ) {
			return $content;
		}
		echo $content;
	}

	public function foot() {
		ob_start();
		?>
  </channel>
</rss>
		<?php
		$content = ob_get_contents();
		ob_end_clean();
		if ( 'test' == $this->mode ) {
			return;
		}
		if ( 'return' == $this->mode ) {
			return $content;
		}
		echo $content;
	}

	public function author( $author, $context = 'post' ) {
		if ( empty( $author['author_login'] ) ) {
			return;
		}
		if ( in_array( $author['author_login'], $this->imported ) ) {
			return;
		}
		if ( 'post' == $context ) {
			$this->imported[] = $author['author_login'];
		}
		ob_start();
		?>
<wp:author>
	<wp:author_id><?php echo $author['author_id']; ?></wp:author_id>
	<wp:author_login><?php echo $author['author_login']; ?></wp:author_login>
	<wp:author_email><?php echo $author['author_email']; ?></wp:author_email>
	<wp:author_display_name><![CDATA[<?php echo $author['author_display_name']; ?>]]></wp:author_display_name>
	<wp:author_first_name><![CDATA[<?php echo $author['author_first_name']; ?>]]></wp:author_first_name>
	<wp:author_last_name><![CDATA[<?php echo $author['author_last_name']; ?>]]></wp:author_last_name>
		<?php
		$add_descripton = true;
		if ( ! empty( $author['meta'] ) ) {
			foreach ( $author['meta'] as $one ) {
				if ( 'description' === $one['meta_key'] ) {
					$add_descripton = false;
				}
				?>
	<wp:meta>
		<wp:meta_key><?php echo $one['meta_key']; ?></wp:meta_key>
		<wp:meta_value><![CDATA[<?php echo $one['meta_value']; ?>]]></wp:meta_value>
	</wp:meta>
				<?php if ( $add_descripton && isset( $author['author_description'] ) && ! empty( $author['author_description'] ) ) { ?>
	<wp:meta>
		<wp:meta_key>description</wp:meta_key>
		<wp:meta_value><![CDATA[<?php echo $author['author_description']; ?>]]></wp:meta_value>
	</wp:meta>
					<?php
				}
			}
		}

		?>
</wp:author>
		<?php
		$content = ob_get_contents();
		ob_end_clean();
		if ( 'test' == $this->mode ) {
			return;
		}
		if ( 'return' == $this->mode ) {
			return $content;
		}
		echo $content;
	}

	public function item( $item ) {
		/**
		 * Close comment_status and ping_status for explicite attachments
		 */
		if ( isset( $item['post_type'] ) && 'attachment' == $item['post_type'] ) {
			$item['ping_status'] = $item['comment_status'] = 'close';
		}
		$item = array_merge(
			array(
				'post_type'      => 'post',
				'comment_status' => 'open',
				'ping_status'    => 'open',
				'post_parent'    => 0,
				'status'         => 'publish',
			),
			$item
		);
		ob_start();
		$thumbnail_id = 0;
		if ( ! empty( $item['thumbnail_path'] ) ) {
			$thumbnail_id = $this->attachment( $item );
		}
		if ( empty( $item['content'] ) && isset( $item['excerpt'] ) ) {
			$item['content'] = $item['excerpt'];
		}
		/**
		 * first print comments authors
		 */
		$this->comments_authors( $item );
		?>
<item>
	<title><![CDATA[<?php echo $item['title']; ?>]]></title>
	<pubDate><?php echo $item['pubDate']; ?></pubDate>
	<dc:creator><![CDATA[<?php echo $item['creator']; ?>]]></dc:creator>
	<guid isPermaLink="false"><?php echo $this->config->site->link; ?>/?p=<?php echo $item['post_id']; ?></guid>
	<description></description>
	<content:encoded><![CDATA[<?php echo $item['content']; ?>]]></content:encoded>
		<?php if ( isset( $item['excerpt'] ) ) { ?>
	<excerpt:encoded><![CDATA[<?php echo $item['excerpt']; ?>]]></excerpt:encoded>
<?php } ?>
	<wp:post_id><?php echo $item['post_id']; ?></wp:post_id>
	<wp:post_date><?php echo $item['post_date']; ?></wp:post_date>
	<wp:post_name><?php echo $item['post_name']; ?></wp:post_name>
	<wp:status><?php echo $item['status']; ?></wp:status>
	<wp:post_type><?php echo $item['post_type']; ?></wp:post_type>
	<wp:post_parent><?php echo $item['post_parent']; ?></wp:post_parent>
	<wp:comment_status><?php echo $item['comment_status']; ?></wp:comment_status>
	<wp:ping_status><?php echo $item['ping_status']; ?></wp:ping_status>
		<?php

		if ( ! empty( $item['attachment_url'] ) ) {
			?>
<wp:attachment_url><?php echo $item['attachment_url']; ?></wp:attachment_url>
			<?php
		}

		if ( ! empty( $item['thumbnail_path'] ) ) {
			?>
	<wp:postmeta>
<wp:meta_key>_thumbnail_id</wp:meta_key>
<wp:meta_value><![CDATA[<?php echo $thumbnail_id; ?>]]></wp:meta_value>
	</wp:postmeta>
			<?php
		}
		if ( ! empty( $item['categories'] ) ) {
			foreach ( $item['categories'] as $one ) {
				printf(
					'<category domain="%s" nicename="%s"><![CDATA[%s]]></category>%s',
					isset( $one['domain'] ) ? $one['domain'] : 'category',
					$one['nicename'],
					$one['content'],
					PHP_EOL
				);
			}
		}
		if ( ! empty( $item['tags'] ) ) {
			foreach ( $item['tags'] as $one ) {
				printf(
					'<category domain="post_tag" nicename="%s"><![CDATA[%s]]></category>%s',
					$one['nicename'],
					$one['content'],
					PHP_EOL
				);
			}
		}
		$this->postmeta( $item );
		$this->comments( $item );
		?>
</item>
		<?php
		$content = ob_get_contents();
		ob_end_clean();
		if ( 'test' == $this->mode ) {
			return;
		}
		if ( 'return' == $this->mode ) {
			return $content;
		}
		echo $content;
	}

	private function comments_authors( $post ) {
		if ( empty( $post['comments'] ) ) {
			return;
		}
		foreach ( $post['comments'] as $item ) {
			if ( isset( $item['author'] ) ) {
				$this->author( $item['author'], 'comments' );
			}
		}
	}

	private function comments( $post ) {
		if ( empty( $post['comments'] ) ) {
			return;
		}
		foreach ( $post['comments'] as $item ) {
			?>
	<wp:comment>
		<wp:comment_id><?php echo $item['comment_id']; ?></wp:comment_id>
		<wp:comment_author><![CDATA[<?php echo $item['comment_author']; ?>]]></wp:comment_author>
		<wp:comment_author_email><?php echo $item['comment_author_email']; ?></wp:comment_author_email>
		<wp:comment_author_url><?php echo $item['comment_author_url']; ?></wp:comment_author_url>
		<wp:comment_author_IP><?php echo $item['comment_author_IP']; ?></wp:comment_author_IP>
		<wp:comment_date><?php echo $item['comment_date']; ?></wp:comment_date>
		<wp:comment_date_gmt><?php echo $item['comment_date']; ?></wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<?php echo $item['comment_content']; ?>]]></wp:comment_content>
		<wp:comment_approved><?php echo intval( $item['comment_approved'] ); ?></wp:comment_approved>
		<wp:comment_type/>
		<wp:comment_parent><?php echo intval( $item['comment_parent'] ); ?></wp:comment_parent>
		<wp:comment_user_id><?php echo intval( $item['comment_user_id'] ); ?></wp:comment_user_id>
	</wp:comment>
			<?php
		}
	}

	private function attachment( $item ) {
		if ( isset( $this->thumbnails[ $item['thumbnail_slug'] ] ) ) {
			return $this->thumbnails[ $item['thumbnail_slug'] ];
		}
		$id = $item['thumbnail_id'];
		$this->thumbnails[ $item['thumbnail_slug'] ] = $item['post_id'];
		?>
<item>
	<title><![CDATA[<?php echo $item['thumbnail_title']; ?>]]></title>
	<pubDate><?php echo $item['post_date']; ?></pubDate>
		<?php if ( isset( $item['creator'] ) ) { ?>
	<dc:creator><![CDATA[<?php echo $item['creator']; ?>]]></dc:creator>
<?php } ?>
	<guid isPermaLink="false"><?php echo $item['thumbnail_path']; ?></guid>
	<description></description>
		<?php if ( isset( $item['thumbnail_content'] ) ) { ?>
	<content:encoded><![CDATA[<?php echo $item['thumbnail_content']; ?>]]></content:encoded>
<?php } ?>
	<excerpt:encoded><![CDATA[]]></excerpt:encoded>
	<wp:post_id><?php echo $id; ?></wp:post_id>
	<wp:comment_status>closed</wp:comment_status>
	<wp:ping_status>closed</wp:ping_status>
	<wp:post_name><?php echo $item['thumbnail_slug']; ?></wp:post_name>
	<wp:status>inherit</wp:status>
	<wp:post_parent><?php echo $item['post_id']; ?></wp:post_parent>
	<wp:post_type>attachment</wp:post_type>
	<wp:attachment_url><?php echo $item['thumbnail_path']; ?></wp:attachment_url>
	<wp:postmeta>
		<wp:meta_key>_extra_thumbnail_path</wp:meta_key>
		<wp:meta_value><![CDATA[<?php echo $item['thumbnail_path']; ?>]]></wp:meta_value>
	</wp:postmeta>
		<?php
		$this->postmeta( $item );
		?>
</item>
		<?php
		return $item['thumbnail_id'];
	}

	public function categories( $categories ) {
		ob_start();
		foreach ( $categories as $item ) {
			if ( isset( $item['replace'] ) && $item['replace'] ) {
				continue;
			}
			?>
<wp:category>
	<wp:category_nicename><?php echo $item['nicename']; ?></wp:category_nicename>
			<?php
			if ( isset( $item['category_parent'] ) && ! empty( $item['category_parent'] ) ) {
				$category_parent = trim( $item['category_parent'] );
				if ( ! empty( $category_parent ) ) {
					?>
	<wp:category_parent><?php echo $category_parent; ?></wp:category_parent>
					<?php
				}
			}
			?>
			<?php if ( isset( $item['category_description'] ) && ! empty( $item['category_description'] ) ) { ?>
	<wp:category_description><![CDATA[<?php echo $item['category_description']; ?>]]></wp:category_description>
<?php } ?>
	<wp:cat_name><![CDATA[<?php echo $item['content']; ?>]]></wp:cat_name>
			<?php
			if ( ! empty( $item['termmeta'] ) ) {
				foreach ( $item['termmeta'] as $one ) {
					?>
	<wp:termmeta>
		<wp:meta_key><?php echo $one['meta_key']; ?></wp:meta_key>
		<wp:meta_value><![CDATA[<?php echo $one['meta_value']; ?>]]></wp:meta_value>
	</wp:termmeta>
					<?php
				}
			}
			?>
</wp:category>
			<?php
		}
		$content = ob_get_contents();
		ob_end_clean();
		if ( 'test' == $this->mode ) {
			return;
		}
		if ( 'return' == $this->mode ) {
			return $content;
		}
		echo $content;
	}

	public function set_mode( $mode ) {
		$this->mode = $mode;
	}

	public function postmeta( $item ) {
		if ( ! empty( $item['postmeta'] ) ) {
			foreach ( $item['postmeta'] as $one ) {
				?>
	<wp:postmeta>
		<wp:meta_key><?php echo $one['meta_key']; ?></wp:meta_key>
		<wp:meta_value><![CDATA[<?php echo $one['meta_value']; ?>]]></wp:meta_value>
	</wp:postmeta>
				<?php
			}
		}
	}
}
